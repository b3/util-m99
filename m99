#!/usr/bin/env bash
# Un moteur pour la machine M99
#
# usage: m99 [OPTIONS] [ACTION|FICHIER]...
#
# Sans paramètre le moteur est démarré en mode interactif.
#
# Si le paramètre est un fichier il est chargé en mémoire et la machine est
# démarrée et fonctionne jusqu'à une instruction d'arrêt.
#
# La documentation de chaque action est accessible en passant son nom à la
# commande help ou à l'option -h ou --help.
#
# OPTIONS
#
#   -h, --help [ACTION]  affiche ce message d'aide ou l'aide de ACTION.
#

##############################################################################

# Afficher les crédits et autres aspects légaux.
credits ()
{
    _ansi "\e[2J\e[;H"
    cat <<EOF

La machine [M99], le processeur débranché, a été pensée et mise au point par
Martin QUINSON et Philippe MARQUET dans le cadre du projet [InfoSansOrdi].

[M99]: https://github.com/InfoSansOrdi/M999
[InfoSansOrdi]: https://github.com/InfoSansOrdi/InfoSansOrdi

Bruno BEAUFILS a rebranché le processeur via ce simulateur écrit en bash et
distribué sous les termes de la licence WTFPL-2.

------------------------------------------------------------------------------

              DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                        Version 2, December 2004

 Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>

 Everyone is permitted to copy and distribute verbatim or modified
 copies of this license document, and changing it is allowed as long
 as the name is changed.

              DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

 0. You just DO WHAT THE FUCK YOU WANT TO.

------------------------------------------------------------------------------

EOF
}

##############################################################################

# J'essaie de rendre le script le plus portable possible :
#
# - pas de fonctionnalités de bash non disponible dans la version de MacOS X ;
# - utilisation des options POSIX des outils Unix quand c'est possible 
#   (https://pubs.opengroup.org/onlinepubs/9699919799/idx/xcu.html).
#
# Pour l'affichage en mode ANSI j'utilise les séquences de contrôle de
# terminaux ANSI et affiche la machine dans un bloc de 44 sur 27 caractères
# sur la partie haute et droite du terminal
# (https://en.wikipedia.org/wiki/ANSI_escape_code#Terminal_output_sequences).

##############################################################################

# Un sed POSIX pour être portable (au moins Linux, FreeBSD et MacOS X)
gnu=$(sed v </dev/null >/dev/null 2>&1 && echo " --posix")
_sed () { sed $gnu -E "$@" ; }

##############################################################################

_dbg () { $debug && echo "${0##*/}: debug: $*" 1>&2 ; }
_warn () { echo "${0##*/}: attention: $*" 1>&2 ; }
_isnum () { test "$1" && test "$1" -eq "$1" 2>/dev/null ; }

_eval () { grep -q "$1" <<< "$commandes exit" && "$@" ; }
_file () { _sed -n '/^# begin '"$1"' *$/,/^# end '"$1"'$/ p' "$0" | _sed '1d ; $d' ; }
_ansi () {
    if $ansi ; then
        cols=$(stty size | cut -d ' ' -f 2)
        ligs=$(stty size | cut -d ' ' -f 1)
        if test $cols -lt 124 || test $ligs -lt 27 ; then
            _warn "terminal trop petit, mode ansi désactivé"
            ansi=false
        fi
    fi
    $ansi && printf "$*"
}

_adr () { printf "%.2d\n" $(_sed 's/^0*//' <<< $1) ; }
_mot () { printf "%.3d\n" $(_sed 's/^0*//' <<< $1) ; }

# Essai de contournement de l'absence de complétion par readline dans read
#
# set -o emacs;
# _tab() {
#     READLINE_LINE=$(compgen -W "$commandes" $READLINE_LINE)
#     READLINE_POINT="${#READLINE_LINE}"
# }
# bind -x '"\t":"_tab"'
# complete -W "$commandes" -E

##############################################################################

# Paramétrer le fonctionnement du moteur.
# args: [PARAM=VALUE]...
# 
#   PARAM    VALUE          DESCRIPTION
#   -----    -----          -----------
#   debug    true|false*    (dés)active les affichages de déboggage
#   view     true*|false    affiche la machine après chaque changement
#   ansi     true*|false    contrôle le positionnement (curseur, affichage)
#   pause    entier (0*)    nombre de secondes d'attentes entre chaque cycle
# 
# En mode batch tous les paramètres sont à false. Les valeurs par défaut en
# mode interactif sont suffixées par *.
#
# En absence de paramètres les valeurs courantes sont affichées.
config ()
{
    _dbg "call: $0" "$@"
    if test $# -eq 0 ; then
        echo debug=$debug
        echo view=$view
        echo ansi=$ansi
        echo pause=$pause
    fi
    for arg in "$@"
    do
        IFS="=" read p v <<< "$arg"
        case "$p" in
            debug)
                $v && PS4="+ DEBUG " && set -x 
                $v || set +x
                debug=$v
                ;;
            view) view=$v ;;
            ansi) ansi=$v ;;
            pause) pause=$v ;;
            *) _warn "paramètre inconnu non pris en compte: $arg" ;;
        esac
    done
}

##############################################################################

# Afficher la documentation du script ou d'une de ses commandes.
# args: [commande]
help ()
{
    tabs -12
    # En version POSIX sed ne reconnait pas les sequences C (genre \n), du coup
    # j'utilise @ que je remplace ensuite en \n via tr.
    if test -z "$1" ; then
        _sed -n '
             2,/^$/ {
                    s/^ *\#//
                    s/^ //g
                    t e
                    d
                    :e
                    p
                    }' $0
        printf 'ACTIONS\n\n'
        for cmd in $commandes
        do
            _sed -n '
                 /^ *$/ h
                 /^ *# / {
                         s/^ *# //
                         H
                         }
                 /^'"$cmd"' ()/ {
                                g
                                s/^\n/  '"$cmd"'@/
                                s/\n.*//
                                p
                                q
                                }' $0 | tr '@' '\t'
        done            
    else
        _sed -n '
             /^ *$/ h
             /^ *#/ {
                    s/^ *# //
                    s/(args:.*)$/\1@/
                    H
                    }
             /^'"$1"' ()/ {
                          g
                          s/^\n/@'"$1"' - /
                          s/args:/@usage: '"$1"'/
                          s/(\n|@)/@  /g
                          p
                          q
                          }' $0 | tr '@' '\n'
    fi
    echo
}

##############################################################################

# Afficher la documentation de la machine M99.
doc ()
{
    _file m99.md
}

##############################################################################

# Afficher l'état de la machine.
show ()
{
    _dbg "call: $0" "$@"
    
    _printf () { _ansi "\e[80C\e[K" ; printf "$@" ; }

    tabs -4
    _ansi "\e[s\e[1;1H"

    _printf "Mémoire\n"

    _printf "\n"

    _printf "\t"
    for x in $(seq 0 10 90)
    do
        printf "$x\t"
    done
    printf "\n"

    for y in $(seq 0 9)
    do
        _printf "$y\t"
        for x in $(seq 0 10 90)
        do
            printf "%s\t" ${memoire[$((x + y))]}
        done
        printf "\n"
    done

    _printf "\n"

    _printf "Processeur\t(t=$cycle)\n"

    _printf "\n"

    _printf "\tPC\t%s\n" $registrePC
    _printf "\tIR\t%s" $registreIR
    $ansi && test "$(echo $instruction | cut -c -3)" = ILL && _ansi "\e[1;31m"
    printf "\t\t%s\n" "$instruction"
    _ansi "\e[0m"
    _printf "\tR\t%s\n" $registreR
    _printf "\tA\t%s\n" $registreA
    _printf "\tB\t%s\n" $registreB

    _printf "\n"
    _printf "Terminal\n"
    _printf "\n"
    _printf "\tSortie : $sortie\n"
    _printf "\n"
    _printf "\n"

    _ansi "\e[u"
}

##############################################################################

# Afficher les instructions exécutées.
strace ()
{
    tabs -8
    printf "$traces"
}

##############################################################################

# Demander les actions à effectuer en boucle.
# Une action vide équivaut à la dernière action demandée.
# Si la lecture est impossible ou donne le mot exit la boucle est terminée.
repl ()
{
    _dbg "call: $0" "$@"
    $inrepl && _warn "déjà en mode interactif" && return
    inrepl=true
    while read -e -p "> " commande
    do
        if test -z "$commande" ; then
            commande=$oldcommande
        elif test "$commande" = exit ; then
            break
        fi
        _eval $commande
        $ansi && $view && show
        history -s "$commande"
        oldcommande="$commande"
    done
}

##############################################################################

# Initialiser la machine (processeur et mémoire).
init ()
{
    _dbg "call: $0" "$@"
    memoire[99]="I/O"

    cycle=0
    registreR=
    registreA=
    registreB=
    registrePC=00
    registreIR=
    instruction=

    sortie=""

    traces="t\tmem\tcode\tinstruction\n"

    ready=true
    
    $view && show   
}

##############################################################################

# Charger la mémoire.
# args: [DEBUT] [FICHIER]
# Remplit la mémoire à partir de DEBUT avec les nombres lus dans FICHIER.
# Si DEBUT est absent le chargement commence à l'adresse 0.
# Si FICHIER est absent la lecture est faite sur l'entrée standard.
#
# Le fichier doit contenir une suite de nombres exprimés sur 3 chiffres
# décimaux. Les nombres peuvent être séparés par des espaces, tabulations ou
# saut de lignes.
#
# Dans ce fichier tout ce qui est compris entre un caractère # (ou les
# caractères //) et la fin de la ligne est ignoré (# y compris).
load ()
{
    _dbg "call: $0" "$@"
    i=0
    _isnum "$1" && { i=$1 && shift ; }
    data=$(_sed -e 's/#.*$//' -e 's!//.*!!' $1 | tr -d "\n \t")
    while test $i -le 99 && read -n3 n
    do
        memoire[$i]=$n
        i=$((i + 1))
    done <<< "$data"

    $view && show
}

##############################################################################

# Afficher le contenu de la mémoire.
# args: [DEBUT [FIN]]
# Affiche le contenu de la mémoire entre la case DEBUT et la case FIN.
# Si DEBUT est absent toute la mémoire est affiché.
# Si FIN est absent la mémoire est affiché entre la case DEBUT et la case 99.
dump ()
{
    _dbg "call: $0" "$@"
    debut=0
    fin=99
    test "$1" && debut=$1
    test "$2" && fin=$2
    for i in $(seq $debut $fin)
    do
        printf "%3s\n" ${memoire[$i]}
    done
}

##############################################################################

# Fixer la valeur de registres.
# args: REGISTRE=VALEUR...
setr ()
{
    _dbg "call: $0" "$@"
    for arg in "$@"
    do
        IFS="=" read r v <<< "$arg"
        eval registre$r=$v
        $view && show
    done
}

##############################################################################

# Fixer la valeur de cases mémoire.
# args: ADDRESSE=VALEUR...
setm ()
{
    _dbg "call: $0" "$@"
    for arg in "$@"
    do
        IFS="=" read a v <<< "$arg"
        memoire[$a]=$v
        $view && show
    done
}

##############################################################################

# Récupérer la prochaine commande (mets à jour IR et PC).
fetch ()
{
    _dbg "call: $0" "$@"
    $ready || return
    test $registrePC = 99 && ready=false && return
    registreIR=${memoire[$registrePC]}
    traces="$traces$cycle\t$(_adr $registrePC)"
    registrePC=$((registrePC + 1))
    $view && show
}

##############################################################################

# Décoder l'instruction dans IR.
decode ()
{
    _dbg "call: $0" "$@"
    $ready || return
    op=$(echo $registreIR | cut -c 1)
    adr=$(echo $registreIR | cut -c 2,3 | _sed 's/^0*//')
    x=$(echo $registreIR | cut -c 2)
    y=$(echo $registreIR | cut -c 3)
    case $op in
        0) instruction="STR $adr" ;;
        1) instruction="LDA $adr" ;;
        2) instruction="LDB $adr" ;;
        3) reg=(R A B)
           instruction="MOV ${reg[$x]} ${reg[$y]}"
           ;;
        4) case $x$y in
               00) instruction="ADD" ;;
               01) instruction="SUB" ;;
               *) instruction="ILL $op$x$y" ;;
           esac
           ;;
        5) instruction="JMP $adr" ;;
        6) instruction="JPP $adr" ;;
        7) instruction="JEQ $adr" ;;
        8) instruction="JNE $adr" ;;
        *) instruction="ILL $op$x$y" ;;
    esac
    $view && show
}

##############################################################################

# Exécuter l'instruction dans IR.
execute ()
{
    _dbg "call: $0" "$@"
    $ready || return
    _$instruction
    traces="$traces\t$registreIR\t$instruction\n"
    $view && show
}

##############################################################################

# Exécuter un cycle complet (fetch/decode/execute).
next ()
{
    _dbg "call: $0" "$@"
    $ready || return
    cycle=$(expr $cycle + 1)
    fetch
    decode
    execute
}

##############################################################################

# Fait fonctionner la machine jusqu'à son arrêt.
run ()
{
    _dbg "call: $0" "$@"
    $ready || return
    while $ready
    do
        next
        test "$pause" && sleep $pause
    done
}

##############################################################################

_ILL ()
{
    _dbg "call: $0" "$@"
    _warn "instruction illégale : $@"
    registrePC=99
}

_STR ()
{
    _dbg "call: $0" "$@"
    if test "x$1" = x99 ; then
        sortie=$registreR
        _ansi "\e[s\e[25;H\e[80C\e[K\t"
        printf "Sortie : $sortie\n"
        _ansi "\e[u"
    else
        memoire[$1]=$registreR
    fi
}

_LDA ()
{
    _dbg "call: $0" "$@"
    if test "x$1" = x99 ; then
        _ansi "\e[s\e[26;H\e[80C\e[K\t"
        read -e -p "Entrée : " -n3 registreA
        _ansi "\e[u"
    else
        registreA=${memoire[$1]}
    fi
}

_LDB ()
{
    _dbg "call: $0" "$@"
    if test "x$1" = x99 ; then
        _ansi "\e[s\e[26;H\e[80C\e[K\t"
        read -e -p "Entrée : " -n3 registreB
        _ansi "\e[u"
    else
        registreB=${memoire[$1]}
    fi
}

_MOV ()
{
    _dbg "call: $0" "$@"
    reg=(R A B)
    eval registre$2=\$registre$1
}

_ADD ()
{
    _dbg "call: $0" "$@"
    # pas de $(()) pour éviter l'interprétation en octal
    registreR=$(expr $registreA + $registreB)
}

_SUB ()
{
    _dbg "call: $0" "$@"
    registreR=$(expr $registreA - $registreB)
}

_JMP ()
{
    _dbg "call: $0" "$@"
    registrePC=$1
}

_JPP ()
{
    _dbg "call: $0" "$@"
    test $registreR -gt 0 && registrePC=$1
}

_JEQ ()
{
    _dbg "call: $0" "$@"
    test $registreR -eq $1 && registrePC=$(expr $registrePC + 2)
}

_JNE ()
{
    _dbg "call: $0" "$@"
    test $registreR -ne $1 && registrePC=$(expr $registrePC + 2)
}

##############################################################################

commandes=$(declare -F | cut -d ' ' -f 3 | grep -v -E '^_' | sort)
debug=false
view=false
ansi=false
pause=0
ready=false
inrepl=false

init

if test $# -eq 0 ; then         # mode interactif
    config debug=false view=true ansi=true pause=1
    _ansi "\e[2J\e[;H"
    $view && $ansi && show
    repl
else                            # mode batch
    if test "$1" = "-h" || test "$1" = "--help" ; then
        shift
        help "$2"
        exit 0
    fi
    for arg in "$@"
    do
        if test -r "$arg" ; then
            load "$arg"
            run
        else
            _eval $arg
        fi
    done
fi

##############################################################################

exit 0

# J'inclus à partir d'ici d'autres fichiers utilisé par le script. L'inclusion
# est gérée par shembed (https://github.com/b3/util-shembed) et utilisé via la
# fonction _file dans le script.

# begin m99.md
# Machine M99

La machine M99 manipule des nombres exprimés sur 3 chiffres décimaux.

Elle a une mémoire de 100 cases adressées de 00 à 99.

La case 99 est utilisée pour les entrées/sorties :

- lire le contenu de la case 99 équivaut à saisir un nombre de 3 chiffres sur
  le terminal (clavier),
- écrire dans la case 99 affiche le contenu sur le terminal (écran).

## Microprocesseur

Il y a 4 registres :

- `A`, `B`, et `IR` contiennent des nombres exprimés sur 3 chiffres décimaux ;
- `PC` contient des nombres exprimés sur 2 chiffres décimaux maximum ;
- `R` contient des nombres signés exprimés sur 3 chiffres décimaux.

## Unité de commande

Au démarrage de la machine l'unité de commande met 00 dans `PC`.

Elle répète le cycle fetch-decode-execute tant que `PC` ne contient pas 99 :

1. **fetch**
    - copie le contenu de la case adressée par `PC` dans `IR`,
    - incrémente la valeur de `PC` ;
2. **decode** identifie l'instruction dans `IR` ;
3. **execute**  éxecute l'instruction.

## Unité Arithmétique et Logique

L'unité arithmétique et logique effectue les calculs via les registres `A`,
`B` et `R`.

| code  | mnémonique | instruction                       |
|-------|------------|-----------------------------------|
| 0 x y | STR xy     | mem(xy) := `R`                    |
| 1 x y | LDA xy     | `A` := mem(xy)                    |
| 2 x y | LDB xy     | `B` := mem(xy)                    |
| 3 x y | MOV x y    | y := x avec 0=`R`, 1=`A` et 2=`B` |
| 4 0 0 | ADD        | `R` := `A`+`B`                    |
| 4 0 1 | SUB        | `R` := `A`-`B`                    |
| 5 x y | JMP xy     | `PC` := xy                        |
| 6 x y | JPP xy     | si `R`>0 alors `PC` := xy         |
| 7 x y | JEQ xy     | si `R`=xy alors `PC` := `PC` + 2  |
| 8 x y | JNE xy     | si `R`!=xy alors `PC` := `PC` + 2 |

# end m99.md
